package spatial.powerup;

import com.jme3.asset.AssetManager;
import com.jme3.effect.ParticleEmitter;
import com.jme3.effect.ParticleMesh;
import com.jme3.material.Material;
import com.jme3.math.ColorRGBA;
import com.jme3.math.Vector3f;
import com.jme3.scene.Geometry;
import com.jme3.scene.Node;
import com.jme3.scene.Spatial;
import com.jme3.scene.shape.Sphere;
import control.AbstractPowerupControl;
import control.PlayerControl;
import control.PlayerInteractorControl;
import spatial.Player;
import spatial.PlayerInteractor;
import spatial.StandardParticleEmitter;

/**
 * An powerup that gives the player the ability to double jump.
 *
 * @author jonatankilhamn
 */
public class InvulnerabilityPowerup extends PlayerInteractor {

    public InvulnerabilityPowerup(AssetManager assetManager) {
        this.attachChild(this.createModel(assetManager));
        this.addControl(this.createControl());
    }

    @Override
    protected Spatial createModel(AssetManager assetManager) {
        Node modelNode = new Node("modelnode");
        /*Sphere model = new Sphere(4, 4, 1f);
        

        Geometry geometry = new Geometry("model", model);
        Material material = new Material(assetManager, "Common/MatDefs/Misc/Unshaded.j3md");
        material.setColor("Color", ColorRGBA.Black);
        geometry.setMaterial(material);

        modelNode.attachChild(geometry);*/
        Node model = (Node) assetManager.loadModel("Models/blackyellowcube/blackyellowcube.j3o");
        model.setName("model");
        model.scale(0.7f);
        modelNode.attachChild(model);
        ParticleEmitter glow = getPowerupParticleEmitter(assetManager);
        modelNode.attachChild(glow);

        return modelNode;
    }

    private ParticleEmitter getPowerupParticleEmitter(AssetManager assetManager) {
        ParticleEmitter glow = StandardParticleEmitter.make(assetManager);
         glow.getMaterial().setTexture("Texture", assetManager.loadTexture(
            "Textures/Explosion/shockwave.png"));
        glow.setImagesX(1);
        glow.setImagesY(1);
        glow.setNumParticles(1);
        glow.setStartColor(ColorRGBA.Yellow);
        glow.setEndColor(ColorRGBA.DarkGray);
        glow.getParticleInfluencer().setInitialVelocity(Vector3f.ZERO);
        glow.setStartSize(0.1f);
        glow.setEndSize(3.51f);
        glow.setGravity(0, 0, 0);
        glow.setLowLife(2f);
        glow.setHighLife(2f);
        glow.getParticleInfluencer().setVelocityVariation(0.3f);
        return glow;
    }

    public void destroy() {
        this.setName("");
        ParticleEmitter pe = (ParticleEmitter) this.getChild("Emitter");
        pe.setLowLife(0f);
        pe.setHighLife(0f);
        ((Node)this.getChild("modelnode")).detachChild(this.getChild("model"));
    }

    @Override
    protected PlayerInteractorControl createControl() {
        return new AbstractPowerupControl() {
            private boolean hasHit;
            //private float time;
            
            public void collideWithPlayer(Player player) {
                if (!hasHit) {
                    PlayerControl pc = player.getControl(PlayerControl.class);
                    pc.invulnerabilityPowerup();
                    hasHit = true;
                    InvulnerabilityPowerup.this.destroy();
                }
            }
            
            @Override
            protected void positionUpdate(float tpf) {
                //time += tpf;
                Spatial model = ((Node)this.spatial).getChild("model");
                if (model != null) {
                    model.rotate(0.09f, 0.18f, 0.04f);
                //model.setLocalTranslation(
                  //      (float)Math.cos(time*15)*2f,
                    //    (float)Math.sin(time*18)*2f,
                      //  (float)Math.sin(2+time*21)*2f);
                }
            }
        };
    }
}
